plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'io.elasticore.springboot3'
version = '1.6.2-SNAPSHOT'
description = 'Spring Boot 3 Common Library'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    withSourcesJar()  // 소스 코드 포함
    withJavadocJar()  // Javadoc 포함
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}



repositories {
    mavenCentral()
}

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.2.2')

    implementation project(':elasticore-project:elasticore-base')

    api 'org.springframework:spring-context:6.1.2'
    api 'org.springframework:spring-beans:6.1.2'
    api 'org.springframework:spring-web:6.1.2'


    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    implementation 'org.reflections:reflections:0.10.2'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'io.projectreactor:reactor-core:3.5.6'
    implementation 'io.netty:netty-handler:4.1.94.Final'

    implementation 'org.apache.commons:commons-jexl3:3.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.0'

    // nano ID
    implementation 'com.aventrix.jnanoid:jnanoid:2.0.0'

    // 테스트 관련
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.11.0'
    testImplementation 'org.springframework:spring-test:5.3.30'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
    testImplementation 'org.assertj:assertj-core:3.25.3'

    // 테스트에 필요한 Spring 관련 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // 🔹 from components.java 중복 추가 방지
            if (components.findByName("java") != null) {
                from components.java
            } else {
                throw new GradleException("components.java not found. Ensure 'java-library' plugin is applied correctly.")
            }
            artifactId = 'elasticore-springboot3'


        }
    }

    repositories {
        maven {
            name = "Nexus"
            url = uri("https://nexus.xsolcorp.co.kr/repository/maven-snapshots/")
            credentials {
                username = project.findProperty("nexusUsername") ?: "tech"
                password = project.findProperty("nexusPassword") ?: "tech123"
            }
        }
    }
}
