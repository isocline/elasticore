package ${packageName};

import ${dtoPackageName}.*;
import ${servicePackageName}.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/${domainName}/${entityName}")
@RequiredArgsConstructor
@Tag(name = "${entityClassName} (${entityLabel})", description = "API for managing ${entityLabel} entities.")
public class ${className} {

    private final ${serviceClassName} ${entityName}Service;


    @Operation(summary = "Create a new ${entityClassName}", description = "Registers a new ${entityClassName} in the system.")
    @PostMapping
    public ${dtoClassName} create(@RequestBody ${dtoClassName} inputDto) {
        return ${entityName}Service.save(inputDto);
    }


    @Operation(summary = "Retrieve a ${entityClassName} by ID", description = "Fetches a single ${entityClassName} using its unique identifier.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "${entityClassName} found successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = ${dtoClassName}.class))}),
            @ApiResponse(responseCode = "404", description = "${entityClassName} not found", content = @Content)
    })
    @GetMapping("${pkPathInfo}")
    public ResponseEntity<${dtoClassName}> findById(${pkParamInfo}) {
        Optional<${dtoClassName}> findOptional = ${entityName}Service.findById(${pkFieldInfo});
        return findOptional.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }


    @Operation(summary = "Search ${entityClassName} data", description = "Searches for ${entityClassName} records based on provided field criteria. All criteria are combined using logical AND.")
    @PostMapping("/search")
    public ${searchReturnType}<${searchResultDTOClassName}> search(@RequestBody ${searchDTOClassName} searchDTO) {
        return ${entityName}Service.findBySearch(searchDTO);
    }


    @Operation(summary = "Update an existing ${entityClassName}", description = "Updates the details of an existing ${entityClassName} by its ID.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "${entityClassName} updated successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = ${dtoClassName}.class))}),
            @ApiResponse(responseCode = "404", description = "${entityClassName} not found", content = @Content)
    })
    @PutMapping
    public ResponseEntity<${dtoClassName}> update(@RequestBody ${dtoClassName} updateDto) {
        ${dtoClassName} resultDto = ${entityName}Service.update(updateDto);
        return ResponseEntity.ok(resultDto);
    }


    @Operation(summary = "Delete a ${entityClassName}", description = "Deletes a ${entityClassName} from the system using its unique identifier.")
    @DeleteMapping("${pkPathInfo}")
    public ResponseEntity<Void> delete(${pkParamInfo}) {
        if (!${entityName}Service.findById(${pkFieldInfo}).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        ${entityName}Service.deleteById(${pkFieldInfo});
        return ResponseEntity.noContent().build();
    }
}
