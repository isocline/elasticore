package ${packageName};


import ${dtoPackageName}.*;
import ${servicePackageName}.*;


import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/${domainName}/${entityName}")
@RequiredArgsConstructor
public class ${className}{

    private final ${serviceClassName} ${entityName}Service;

    @GetMapping
    @ResponseBody
    public List<${entityClassName}DTO> getAll${entityName}s() {
        return ${entityName}Service.findAll();
    }


    @GetMapping("/{id}")
    @ResponseBody
    public ResponseEntity<${dtoClassName}> findById(@PathVariable("id") ${pkType} id) {
        Optional<${entityClassName}DTO> ${entityClassName} = ${entityName}Service.findById(id);
        return ${entityClassName}.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    @ResponseBody
    public ${dtoClassName} create(@RequestBody ${dtoClassName} ${entityClassName}) {
        return ${entityName}Service.save(${entityClassName});
    }


    @PostMapping("/search")
    @ResponseBody
    public ${searchReturnType}<${dtoClassName}> search(@RequestBody ${searchDTOClassName} searchDTO) {
        return ${entityName}Service.findBySearch(searchDTO);
    }

    @PutMapping("/{id}")
    @ResponseBody
    public ResponseEntity<${dtoClassName}> update(@PathVariable("id") ${pkType} id, @RequestBody ${dtoClassName} ${entityName}Details) {
        ${dtoClassName} ${entityName} = ${entityName}Service.update(${entityName}Details);

        return ResponseEntity.ok(${entityName});
    }

    @DeleteMapping("/{id}")
    @ResponseBody
    public ResponseEntity<Void> delete(@PathVariable("id") ${pkType} id) {
        if (!${entityName}Service.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }

        ${entityName}Service.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}
