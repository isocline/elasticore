package ${packageName};

import ${entityPackageName}.*;
import ${dtoPackageName}.*;
import ${repositoryPackageName}.*;

import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@AllArgsConstructor
public class ${className} {

    private final ${entityClassName}Repository repository;

    public List<${dtoClassName}> findAll() {
        return repository.findAll().stream()
                .map(${mapperName}::toDTO)
                .collect(Collectors.toList());
    }

    public List<${dtoClassName}> findBySearch(${searchDTOClassName} searchDTO) {
        Specification<${entityClassName}> specification = ${mapperName}.toSpec(searchDTO);
        Sort sort = searchDTO.getSort();
        if(sort ==null) {
            return repository.findAll(specification).stream()
                                .map(${mapperName}::toDTO)
                                .collect(Collectors.toList());
        }
        return repository.findAll(specification, sort).stream()
                .map(${mapperName}::toDTO)
                .collect(Collectors.toList());
    }


    public Optional<${dtoClassName}> findById(Long id) {
        return repository.findById(id).map(${mapperName}::toDTO);
    }

    public ${entityClassName}DTO save(${dtoClassName} dto) {
        ${entityClassName} entity = ${mapperName}.toEntity(dto);
        ${childRefInfo}

        ${entityClassName} result = repository.save(entity);
        return ${mapperName}.toDTO(result);
    }

    public void deleteById(${pkType} id) {
        repository.deleteById(id);
    }
}
