package ${packageName};

import ${entityPackageName}.*;
import ${dtoPackageName}.*;
import ${repositoryPackageName}.*;

import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@AllArgsConstructor
public class ${className} {

    private final ${domainName}RepositoryHelper helper;

    public List<${dtoClassName}> findAll() {
        return helper.get${entityClassName}().findAll().stream()
                .map(${mapperName}::toDTO)
                .collect(Collectors.toList());
    }


    public Page<${dtoClassName}> findBySearch(${searchDTOClassName} searchDTO) {
        Specification<${entityClassName}> specification = ${mapperName}.toSpec(searchDTO);
        Pageable pageable = searchDTO.getPageable();
        Page<${entityClassName}> result = helper.get${entityClassName}().findAll(specification, pageable);
        return result.map(${mapperName}::toDTO);
    }

    public Optional<${dtoClassName}> findById(Long id) {
        return helper.get${entityClassName}().findById(id).map(${mapperName}::toDTO);
    }

    public ${entityClassName}DTO save(${dtoClassName} dto) {
        ${entityClassName} entity = ${mapperName}.toEntity(dto);
        ${childRefInfo}
        
        ${entityClassName} result = helper.get${entityClassName}().save(entity);
        return ${mapperName}.toDTO(result);
    }

    public void deleteById(${pkType} id) {
        helper.get${entityClassName}().deleteById(id);
    }
}
