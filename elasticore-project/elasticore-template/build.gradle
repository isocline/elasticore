import org.gradle.api.tasks.JavaExec
import org.gradle.api.tasks.compile.JavaCompile

plugins {
	id 'org.springframework.boot' version '2.7.18'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}



group = 'elasticore-template'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'




configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()

}



dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-logging'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.projectlombok:lombok:1.18.26'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'mysql:mysql-connector-java:8.0.23'


	implementation project(':elasticore-project:elasticore-base')
	//annotationProcessor project(':elasticore-project:elasticore-base')
	annotationProcessor 'org.projectlombok:lombok'


	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
}


compileJava.doFirst {
	//new File("${projectDir}/src/main/java/io/elasticore/meta/Mark.java").delete()
}




def generated = 'src/main/java'


tasks.withType(JavaCompile) {
	options.compilerArgs += ["-AprojectPath=$projectDir", "-AgeneratedPath=$generated"]
	//options.getGeneratedSourceOutputDirectory().set(file(generated))
}


sourceSets {
	main.java.srcDirs += [generated]
	//main.java.srcDirs  generated
}




task genModel(type: JavaExec) {
	println "genModel"
	classpath = project(':elasticore-project:elasticore-base').sourceSets.main.runtimeClasspath
	main = 'io.elasticore.base.extract.ModelExtractor'
	args "$projectDir/src/main/java"

	doLast {

	}
}

compileJava {
	dependsOn genModel

}


compileJava.doFirst {
	println 'Starting Java compilation...'
}
