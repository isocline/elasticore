//ecd:-40826526H20250411151034_V1.0
// Initially generated by ElastiCORE; no longer managed—do not remove this line.
package io.elasticore.blueprint.domain.parts.controller;

import io.elasticore.blueprint.domain.parts.dto.*;
import io.elasticore.blueprint.domain.parts.service.*;

import jakarta.validation.Valid;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import io.elasticore.runtime.utils.DTOUtils;

/**
 * REST API controller for managing ParamInfo entities.
 *
 * Initially generated by ElastiCORE — a model-driven platform for
 * rapid Spring Boot service scaffolding.
 *
 * No longer managed by ElastiCORE. You may modify as needed,
 * but retain the marker for traceability.
 */
@RestController
@RequestMapping("/api/parts/paramInfo")
@RequiredArgsConstructor
@Tag(name = "ParamInfo (차량별 설정된 파라미터 값 정보)", description = "API for managing 차량별 설정된 파라미터 값 정보 entities.")
public class ParamInfoController {

    private final ParamInfoService paramInfoService;


    @Operation(summary = "Create a new ParamInfo", description = "Registers a new ParamInfo in the system.")
    @PostMapping
    public ParamInfoDTO create(@Valid @RequestBody ParamInfoDTO inputDto) {
        return paramInfoService.save(inputDto);
    }


    @Operation(summary = "Retrieve a ParamInfo by ID", description = "Fetches a single ParamInfo using its unique identifier.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "ParamInfo found successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = ParamInfoDTO.class))}),
            @ApiResponse(responseCode = "404", description = "ParamInfo not found", content = @Content)
    })
    @GetMapping("/{idx}")
    public ResponseEntity<ParamInfoDTO> findById(@PathVariable("idx") String idx) {
        Optional<ParamInfoDTO> findOptional = paramInfoService.findById(idx);
        return findOptional.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }


    @Operation(summary = "Search ParamInfo data", description = "Searches for ParamInfo records based on provided field criteria. All criteria are combined using logical AND.")
    @PostMapping("/search")
    public Page<ParamInfoDTO> search(@RequestBody ParamInfoSrchDTO searchDTO) {
        return paramInfoService.findBySearch(searchDTO);
    }


    @Operation(summary = "Update an existing ParamInfo", description = "Updates the details of an existing ParamInfo by its ID.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "ParamInfo updated successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = ParamInfoDTO.class))}),
            @ApiResponse(responseCode = "404", description = "ParamInfo not found", content = @Content)
    })
    @PutMapping
    public ResponseEntity<ParamInfoDTO> update(@RequestBody ParamInfoDTO updateDto) {
        ParamInfoDTO resultDto = paramInfoService.update(updateDto);
        return ResponseEntity.ok(resultDto);
    }

    @Operation(summary = "Delete multiple ParamInfo entities", description = "Deletes a list of ParamInfo entities based on their IDs provided in the request body.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Deletion result for each ParamInfo entity", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class, description = "List of booleans indicating success (true) or failure (false) for each entity"))}),
            @ApiResponse(responseCode = "404", description = "One or more ParamInfo entities not found", content = @Content)
    })
    @PostMapping("/delete")
    public ResponseEntity<List<Boolean>> delete(@RequestBody List<ParamInfoKeyDTO> delDtoList) {
        List<Boolean> result = paramInfoService.delete(delDtoList);
        return ResponseEntity.ok(result);
    }


    @Operation(summary = "Delete a ParamInfo", description = "Deletes a ParamInfo from the system using its unique identifier.")
    @DeleteMapping("/{idx}")
    public ResponseEntity<Boolean> delete(@PathVariable("idx") String idx) {
        if (!paramInfoService.findById(idx).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        boolean result = paramInfoService.deleteById(idx);
        return ResponseEntity.ok(result);
    }

    @Operation(
        summary = "Retrieve metadata information for ParamInfoDTO",
        description = "Fetches metadata for the ParamInfoDTO, including field types, size limitations, and possible enumeration values, if applicable."
    )
    @GetMapping("/schema/info")
    public ResponseEntity<Map<String, Object>> getMetaInfo() {
        return ResponseEntity.ok(DTOUtils.getMetaInfo(ParamInfoDTO.class));
    }
}
