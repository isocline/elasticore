//ecd:469481668H20250411151034_V1.0
// Initially generated by ElastiCORE; no longer managed—do not remove this line.
package io.elasticore.blueprint.domain.parts.controller;

import io.elasticore.blueprint.domain.parts.dto.*;
import io.elasticore.blueprint.domain.parts.service.*;

import jakarta.validation.Valid;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import io.elasticore.runtime.utils.DTOUtils;

/**
 * REST API controller for managing CarInfo entities.
 *
 * Initially generated by ElastiCORE — a model-driven platform for
 * rapid Spring Boot service scaffolding.
 *
 * No longer managed by ElastiCORE. You may modify as needed,
 * but retain the marker for traceability.
 */
@RestController
@RequestMapping("/api/parts/carInfo")
@RequiredArgsConstructor
@Tag(name = "CarInfo (실제 등록 차량 정보)", description = "API for managing 실제 등록 차량 정보 entities.")
public class CarInfoController {

    private final CarInfoService carInfoService;


    @Operation(summary = "Create a new CarInfo", description = "Registers a new CarInfo in the system.")
    @PostMapping
    public CarInfoDTO create(@Valid @RequestBody CarInfoDTO inputDto) {
        return carInfoService.save(inputDto);
    }


    @Operation(summary = "Retrieve a CarInfo by ID", description = "Fetches a single CarInfo using its unique identifier.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "CarInfo found successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = CarInfoDTO.class))}),
            @ApiResponse(responseCode = "404", description = "CarInfo not found", content = @Content)
    })
    @GetMapping("/{id}")
    public ResponseEntity<CarInfoDTO> findById(@PathVariable("id") String id) {
        Optional<CarInfoDTO> findOptional = carInfoService.findById(id);
        return findOptional.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }


    @Operation(summary = "Search CarInfo data", description = "Searches for CarInfo records based on provided field criteria. All criteria are combined using logical AND.")
    @PostMapping("/search")
    public Page<CarInfoDTO> search(@RequestBody CarInfoSrchDTO searchDTO) {
        return carInfoService.findBySearch(searchDTO);
    }


    @Operation(summary = "Update an existing CarInfo", description = "Updates the details of an existing CarInfo by its ID.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "CarInfo updated successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = CarInfoDTO.class))}),
            @ApiResponse(responseCode = "404", description = "CarInfo not found", content = @Content)
    })
    @PutMapping
    public ResponseEntity<CarInfoDTO> update(@RequestBody CarInfoDTO updateDto) {
        CarInfoDTO resultDto = carInfoService.update(updateDto);
        return ResponseEntity.ok(resultDto);
    }

    @Operation(summary = "Delete multiple CarInfo entities", description = "Deletes a list of CarInfo entities based on their IDs provided in the request body.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Deletion result for each CarInfo entity", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class, description = "List of booleans indicating success (true) or failure (false) for each entity"))}),
            @ApiResponse(responseCode = "404", description = "One or more CarInfo entities not found", content = @Content)
    })
    @PostMapping("/delete")
    public ResponseEntity<List<Boolean>> delete(@RequestBody List<CarInfoKeyDTO> delDtoList) {
        List<Boolean> result = carInfoService.delete(delDtoList);
        return ResponseEntity.ok(result);
    }


    @Operation(summary = "Delete a CarInfo", description = "Deletes a CarInfo from the system using its unique identifier.")
    @DeleteMapping("/{id}")
    public ResponseEntity<Boolean> delete(@PathVariable("id") String id) {
        if (!carInfoService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        boolean result = carInfoService.deleteById(id);
        return ResponseEntity.ok(result);
    }

    @Operation(
        summary = "Retrieve metadata information for CarInfoDTO",
        description = "Fetches metadata for the CarInfoDTO, including field types, size limitations, and possible enumeration values, if applicable."
    )
    @GetMapping("/schema/info")
    public ResponseEntity<Map<String, Object>> getMetaInfo() {
        return ResponseEntity.ok(DTOUtils.getMetaInfo(CarInfoDTO.class));
    }
}
