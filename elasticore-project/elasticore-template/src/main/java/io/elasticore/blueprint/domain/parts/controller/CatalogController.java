//ecd:-1986062751H20250425111000_V1.0
// Initially generated by ElastiCORE; no longer managed—do not remove this line.
package io.elasticore.blueprint.domain.parts.controller;

import io.elasticore.blueprint.domain.parts.dto.*;
import io.elasticore.blueprint.domain.parts.service.*;

import jakarta.validation.Valid;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import io.elasticore.runtime.utils.DTOUtils;

/**
 * REST API controller for managing Catalog entities.
 *
 * Initially generated by ElastiCORE — a model-driven platform for
 * rapid Spring Boot service scaffolding.
 *
 * No longer managed by ElastiCORE. You may modify as needed,
 * but retain the marker for traceability.
 */
@RestController
@RequestMapping("/api/parts/catalog")
@RequiredArgsConstructor
@Tag(name = "Catalog (차량 분류 정보를 관리하는 카탈로그 엔티티)", description = "API for managing 차량 분류 정보를 관리하는 카탈로그 엔티티 entities.")
public class CatalogController {

    private final CatalogService catalogService;


    @Operation(summary = "Create a new Catalog", description = "Registers a new Catalog in the system.")
    @PostMapping
    public CatalogDTO create(@Valid @RequestBody CatalogDTO inputDto) {
        return catalogService.save(inputDto);
    }


    @Operation(summary = "Retrieve a Catalog by ID", description = "Fetches a single Catalog using its unique identifier.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Catalog found successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = CatalogDTO.class))}),
            @ApiResponse(responseCode = "404", description = "Catalog not found", content = @Content)
    })
    @GetMapping("/{catalogId}")
    public ResponseEntity<CatalogDTO> findById(@PathVariable("catalogId") String catalogId) {
        Optional<CatalogDTO> findOptional = catalogService.findById(catalogId);
        return findOptional.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }


    @Operation(summary = "Search Catalog data", description = "Searches for Catalog records based on provided field criteria. All criteria are combined using logical AND.")
    @PostMapping("/search")
    public Page<CatalogDTO> search(@RequestBody CatalogSrchDTO searchDTO) {
        return catalogService.findBySearch(searchDTO);
    }


    @Operation(summary = "Update an existing Catalog", description = "Updates the details of an existing Catalog by its ID.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Catalog updated successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = CatalogDTO.class))}),
            @ApiResponse(responseCode = "404", description = "Catalog not found", content = @Content)
    })
    @PutMapping
    public ResponseEntity<CatalogDTO> update(@RequestBody CatalogDTO updateDto) {
        CatalogDTO resultDto = catalogService.update(updateDto);
        return ResponseEntity.ok(resultDto);
    }

    @Operation(summary = "Delete multiple Catalog entities", description = "Deletes a list of Catalog entities based on their IDs provided in the request body.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Deletion result for each Catalog entity", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class, description = "List of booleans indicating success (true) or failure (false) for each entity"))}),
            @ApiResponse(responseCode = "404", description = "One or more Catalog entities not found", content = @Content)
    })
    @PostMapping("/delete")
    public ResponseEntity<List<Boolean>> delete(@RequestBody List<CatalogKeyDTO> delDtoList) {
        List<Boolean> result = catalogService.delete(delDtoList);
        return ResponseEntity.ok(result);
    }


    @Operation(summary = "Delete a Catalog", description = "Deletes a Catalog from the system using its unique identifier.")
    @DeleteMapping("/{catalogId}")
    public ResponseEntity<Boolean> delete(@PathVariable("catalogId") String catalogId) {
        if (!catalogService.findById(catalogId).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        boolean result = catalogService.deleteById(catalogId);
        return ResponseEntity.ok(result);
    }

    @Operation(
        summary = "Retrieve metadata information for CatalogDTO",
        description = "Fetches metadata for the CatalogDTO, including field types, size limitations, and possible enumeration values, if applicable."
    )
    @GetMapping("/schema/info")
    public ResponseEntity<Map<String, Object>> getMetaInfo() {
        return ResponseEntity.ok(DTOUtils.getMetaInfo(CatalogDTO.class));
    }
}
