//ecd:-48170251H20250409104819_V1.0
// Initially generated by ElastiCORE; no longer managed—do not remove this line.
package io.elasticore.blueprint.domain.bbs.controller;

import io.elasticore.blueprint.domain.bbs.dto.*;
import io.elasticore.blueprint.domain.bbs.entity.Article;
import io.elasticore.blueprint.domain.bbs.entity.Q;
import io.elasticore.blueprint.domain.bbs.enums.BoardType;
import io.elasticore.blueprint.domain.bbs.repository.BbsRepositoryHelper;
import io.elasticore.blueprint.domain.bbs.service.*;

import io.elasticore.springboot3.entity.Op;
import jakarta.validation.Valid;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import io.elasticore.runtime.utils.DTOUtils;

/**
 * REST API controller for managing Article entities.
 *
 * Initially generated by ElastiCORE — a model-driven platform for
 * rapid Spring Boot service scaffolding.
 *
 * No longer managed by ElastiCORE. You may modify as needed,
 * but retain the marker for traceability.
 */
@RestController
@RequestMapping("/api/bbs/article")
@RequiredArgsConstructor
@Tag(name = "Article (게시물)", description = "API for managing 게시물 entities.")
public class ArticleController {

    private final ArticleService articleService;

    private final BbsRepositoryHelper repositoryHelper;


    @GetMapping("/case1")
    public ResponseEntity<?> case1() {

        //Specification where = Q.Article.board().getBoardType().where(Op.EQ, BoardType.PUBLIC);
        Specification where = Q.Article.board().boardType(Op.IN, List.of(BoardType.PUBLIC) );


        List<Article> all = repositoryHelper.getArticle().findAll(where);




        //ArticleSrchDTO build = ArticleSrchDTO.builder().boardBid(1L).build();

        return ResponseEntity.ok(all);
    }


    @Operation(summary = "Create a new Article", description = "Registers a new Article in the system.")
    @PostMapping
    public ArticleDTO create(@Valid @RequestBody ArticleDTO inputDto) {
        return articleService.save(inputDto);
    }


    @Operation(summary = "Retrieve a Article by ID", description = "Fetches a single Article using its unique identifier.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Article found successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = ArticleDTO.class))}),
            @ApiResponse(responseCode = "404", description = "Article not found", content = @Content)
    })
    @GetMapping("/{aid}")
    public ResponseEntity<ArticleDTO> findById(@PathVariable("aid") String aid) {
        Optional<ArticleDTO> findOptional = articleService.findById(aid);
        return findOptional.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }


    @Operation(summary = "Search Article data", description = "Searches for Article records based on provided field criteria. All criteria are combined using logical AND.")
    @PostMapping("/search")
    public Page<ArticleDTO> search(@RequestBody ArticleSrchDTO searchDTO) {
        return articleService.findBySearch(searchDTO);
    }


    @Operation(summary = "Update an existing Article", description = "Updates the details of an existing Article by its ID.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Article updated successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = ArticleDTO.class))}),
            @ApiResponse(responseCode = "404", description = "Article not found", content = @Content)
    })
    @PutMapping
    public ResponseEntity<ArticleDTO> update(@RequestBody ArticleDTO updateDto) {
        ArticleDTO resultDto = articleService.update(updateDto);
        return ResponseEntity.ok(resultDto);
    }

    @Operation(summary = "Delete multiple Article entities", description = "Deletes a list of Article entities based on their IDs provided in the request body.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Deletion result for each Article entity", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class, description = "List of booleans indicating success (true) or failure (false) for each entity"))}),
            @ApiResponse(responseCode = "404", description = "One or more Article entities not found", content = @Content)
    })
    @PostMapping("/delete")
    public ResponseEntity<List<Boolean>> delete(@RequestBody List<ArticleKeyDTO> delDtoList) {
        List<Boolean> result = articleService.delete(delDtoList);
        return ResponseEntity.ok(result);
    }


    @Operation(summary = "Delete a Article", description = "Deletes a Article from the system using its unique identifier.")
    @DeleteMapping("/{aid}")
    public ResponseEntity<Boolean> delete(@PathVariable("aid") String aid) {
        if (!articleService.findById(aid).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        boolean result = articleService.deleteById(aid);
        return ResponseEntity.ok(result);
    }

    @Operation(
        summary = "Retrieve metadata information for ArticleDTO",
        description = "Fetches metadata for the ArticleDTO, including field types, size limitations, and possible enumeration values, if applicable."
    )
    @GetMapping("/schema/info")
    public ResponseEntity<Map<String, Object>> getMetaInfo() {
        return ResponseEntity.ok(DTOUtils.getMetaInfo(ArticleDTO.class));
    }
}
