//ecd:932219574H20250402091333_V1.0
// Initially generated by ElastiCORE; no longer managedâ€”do not remove this line.
package com.xyrokorea.xyroplug.domain.channel.controller;

import com.xyrokorea.xyroplug.domain.channel.dto.*;
import com.xyrokorea.xyroplug.domain.channel.service.*;

import jakarta.validation.Valid;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import io.elasticore.runtime.utils.DTOUtils;

@RestController
@RequestMapping("/api/channel/enployee")
@RequiredArgsConstructor
@Tag(name = "Enployee (enployee)", description = "API for managing enployee entities.")
public class EnployeeController {

    private final EnployeeService enployeeService;


    @Operation(summary = "Create a new Enployee", description = "Registers a new Enployee in the system.")
    @PostMapping
    public EnployeeDTO create(@Valid @RequestBody EnployeeDTO inputDto) {
        return enployeeService.save(inputDto);
    }


    @Operation(summary = "Retrieve a Enployee by ID", description = "Fetches a single Enployee using its unique identifier.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Enployee found successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = EnployeeDTO.class))}),
            @ApiResponse(responseCode = "404", description = "Enployee not found", content = @Content)
    })
    @GetMapping("/{id}")
    public ResponseEntity<EnployeeDTO> findById(@PathVariable("id") String id) {
        Optional<EnployeeDTO> findOptional = enployeeService.findById(id);
        return findOptional.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }


    @Operation(summary = "Search Enployee data", description = "Searches for Enployee records based on provided field criteria. All criteria are combined using logical AND.")
    @PostMapping("/search")
    public Page<EnployeeDTO> search(@RequestBody EnployeeSrchDTO searchDTO) {
        return enployeeService.findBySearch(searchDTO);
    }


    @Operation(summary = "Update an existing Enployee", description = "Updates the details of an existing Enployee by its ID.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Enployee updated successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = EnployeeDTO.class))}),
            @ApiResponse(responseCode = "404", description = "Enployee not found", content = @Content)
    })
    @PutMapping
    public ResponseEntity<EnployeeDTO> update(@RequestBody EnployeeDTO updateDto) {
        EnployeeDTO resultDto = enployeeService.update(updateDto);
        return ResponseEntity.ok(resultDto);
    }

    @Operation(summary = "Delete multiple Enployee entities", description = "Deletes a list of Enployee entities based on their IDs provided in the request body.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Deletion result for each Enployee entity", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class, description = "List of booleans indicating success (true) or failure (false) for each entity"))}),
            @ApiResponse(responseCode = "404", description = "One or more Enployee entities not found", content = @Content)
    })
    @PostMapping("/delete")
    public ResponseEntity<List<Boolean>> delete(@RequestBody List<EnployeeKeyDTO> delDtoList) {
        List<Boolean> result = enployeeService.delete(delDtoList);
        return ResponseEntity.ok(result);
    }


    @Operation(summary = "Delete a Enployee", description = "Deletes a Enployee from the system using its unique identifier.")
    @DeleteMapping("/{id}")
    public ResponseEntity<Boolean> delete(@PathVariable("id") String id) {
        if (!enployeeService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        boolean result = enployeeService.deleteById(id);
        return ResponseEntity.ok(result);
    }

    @Operation(
        summary = "Retrieve metadata information for EnployeeDTO",
        description = "Fetches metadata for the EnployeeDTO, including field types, size limitations, and possible enumeration values, if applicable."
    )
    @GetMapping("/schema/info")
    public ResponseEntity<Map<String, Object>> getMetaInfo() {
        return ResponseEntity.ok(DTOUtils.getMetaInfo(EnployeeDTO.class));
    }
}
