//ecd:379138666H20250408175247_V1.0
// Initially generated by ElastiCORE; no longer managed—do not remove this line.
package com.xyrokorea.xyroplug.domain.channel.controller;

import com.xyrokorea.xyroplug.domain.channel.dto.*;
import com.xyrokorea.xyroplug.domain.channel.service.*;

import jakarta.validation.Valid;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import io.elasticore.runtime.utils.DTOUtils;

/**
 * REST API controller for managing Message entities.
 *
 * Initially generated by ElastiCORE — a model-driven platform for
 * rapid Spring Boot service scaffolding.
 *
 * No longer managed by ElastiCORE. You may modify as needed,
 * but retain the marker for traceability.
 */
@RestController
@RequestMapping("/api/channel/message")
@RequiredArgsConstructor
@Tag(name = "Message (메시지)", description = "API for managing 메시지 entities.")
public class MessageController {

    private final MessageService messageService;


    @Operation(summary = "Create a new Message", description = "Registers a new Message in the system.")
    @PostMapping
    public MessageDTO create(@Valid @RequestBody MessageDTO inputDto) {
        return messageService.save(inputDto);
    }


    @Operation(summary = "Retrieve a Message by ID", description = "Fetches a single Message using its unique identifier.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Message found successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = MessageDTO.class))}),
            @ApiResponse(responseCode = "404", description = "Message not found", content = @Content)
    })
    @GetMapping("/{msgId}")
    public ResponseEntity<MessageDTO> findById(@PathVariable("msgId") Long msgId) {
        Optional<MessageDTO> findOptional = messageService.findById(msgId);
        return findOptional.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }


    @Operation(summary = "Search Message data", description = "Searches for Message records based on provided field criteria. All criteria are combined using logical AND.")
    @PostMapping("/search")
    public Page<MessageDTO> search(@RequestBody MessageSrchDTO searchDTO) {
        return messageService.findBySearch(searchDTO);
    }


    @Operation(summary = "Update an existing Message", description = "Updates the details of an existing Message by its ID.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Message updated successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = MessageDTO.class))}),
            @ApiResponse(responseCode = "404", description = "Message not found", content = @Content)
    })
    @PutMapping
    public ResponseEntity<MessageDTO> update(@RequestBody MessageDTO updateDto) {
        MessageDTO resultDto = messageService.update(updateDto);
        return ResponseEntity.ok(resultDto);
    }

    @Operation(summary = "Delete multiple Message entities", description = "Deletes a list of Message entities based on their IDs provided in the request body.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Deletion result for each Message entity", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class, description = "List of booleans indicating success (true) or failure (false) for each entity"))}),
            @ApiResponse(responseCode = "404", description = "One or more Message entities not found", content = @Content)
    })
    @PostMapping("/delete")
    public ResponseEntity<List<Boolean>> delete(@RequestBody List<MessageKeyDTO> delDtoList) {
        List<Boolean> result = messageService.delete(delDtoList);
        return ResponseEntity.ok(result);
    }


    @Operation(summary = "Delete a Message", description = "Deletes a Message from the system using its unique identifier.")
    @DeleteMapping("/{msgId}")
    public ResponseEntity<Boolean> delete(@PathVariable("msgId") Long msgId) {
        if (!messageService.findById(msgId).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        boolean result = messageService.deleteById(msgId);
        return ResponseEntity.ok(result);
    }

    @Operation(
        summary = "Retrieve metadata information for MessageDTO",
        description = "Fetches metadata for the MessageDTO, including field types, size limitations, and possible enumeration values, if applicable."
    )
    @GetMapping("/schema/info")
    public ResponseEntity<Map<String, Object>> getMetaInfo() {
        return ResponseEntity.ok(DTOUtils.getMetaInfo(MessageDTO.class));
    }
}
