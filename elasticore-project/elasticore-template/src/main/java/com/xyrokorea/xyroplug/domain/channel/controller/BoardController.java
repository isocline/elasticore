//ecd:1909865243H20250402133543_V1.0
// Initially generated by ElastiCORE; no longer managedâ€”do not remove this line.
package com.xyrokorea.xyroplug.domain.channel.controller;

import com.xyrokorea.xyroplug.domain.channel.dto.*;
import com.xyrokorea.xyroplug.domain.channel.service.*;

import jakarta.validation.Valid;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import io.elasticore.runtime.utils.DTOUtils;

@RestController
@RequestMapping("/api/channel/board")
@RequiredArgsConstructor
@Tag(name = "Board (board)", description = "API for managing board entities.")
public class BoardController {

    private final BoardService boardService;


    @Operation(summary = "Create a new Board", description = "Registers a new Board in the system.")
    @PostMapping
    public BoardDTO create(@Valid @RequestBody BoardDTO inputDto) {
        return boardService.save(inputDto);
    }


    @Operation(summary = "Retrieve a Board by ID", description = "Fetches a single Board using its unique identifier.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Board found successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = BoardDTO.class))}),
            @ApiResponse(responseCode = "404", description = "Board not found", content = @Content)
    })
    @GetMapping("/{id}")
    public ResponseEntity<BoardDTO> findById(@PathVariable("id") Long id) {
        Optional<BoardDTO> findOptional = boardService.findById(id);
        return findOptional.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }


    @Operation(summary = "Search Board data", description = "Searches for Board records based on provided field criteria. All criteria are combined using logical AND.")
    @PostMapping("/search")
    public Page<BoardDTO> search(@RequestBody BoardSrchDTO searchDTO) {
        return boardService.findBySearch(searchDTO);
    }


    @Operation(summary = "Update an existing Board", description = "Updates the details of an existing Board by its ID.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Board updated successfully", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = BoardDTO.class))}),
            @ApiResponse(responseCode = "404", description = "Board not found", content = @Content)
    })
    @PutMapping
    public ResponseEntity<BoardDTO> update(@RequestBody BoardDTO updateDto) {
        BoardDTO resultDto = boardService.update(updateDto);
        return ResponseEntity.ok(resultDto);
    }

    @Operation(summary = "Delete multiple Board entities", description = "Deletes a list of Board entities based on their IDs provided in the request body.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Deletion result for each Board entity", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class, description = "List of booleans indicating success (true) or failure (false) for each entity"))}),
            @ApiResponse(responseCode = "404", description = "One or more Board entities not found", content = @Content)
    })
    @PostMapping("/delete")
    public ResponseEntity<List<Boolean>> delete(@RequestBody List<BoardKeyDTO> delDtoList) {
        List<Boolean> result = boardService.delete(delDtoList);
        return ResponseEntity.ok(result);
    }


    @Operation(summary = "Delete a Board", description = "Deletes a Board from the system using its unique identifier.")
    @DeleteMapping("/{id}")
    public ResponseEntity<Boolean> delete(@PathVariable("id") Long id) {
        if (!boardService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        boolean result = boardService.deleteById(id);
        return ResponseEntity.ok(result);
    }

    @Operation(
        summary = "Retrieve metadata information for BoardDTO",
        description = "Fetches metadata for the BoardDTO, including field types, size limitations, and possible enumeration values, if applicable."
    )
    @GetMapping("/schema/info")
    public ResponseEntity<Map<String, Object>> getMetaInfo() {
        return ResponseEntity.ok(DTOUtils.getMetaInfo(BoardDTO.class));
    }
}
